{"ast":null,"code":"var _jsxFileName = \"/media/haris/167d74dd-415c-4b8f-9af8-e38f039cf8e7/React js/portfolio-temp/src/components/sections/FeaturesSplit.js\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { SectionSplitProps } from '../../utils/SectionProps';\nimport SectionHeader from './partials/SectionHeader';\nimport Image from '../elements/Image';\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nconst propTypes = { ...SectionSplitProps.types\n};\nconst defaultProps = { ...SectionSplitProps.defaults\n};\n\nconst FeaturesSplit = ({\n  className,\n  topOuterDivider,\n  bottomOuterDivider,\n  topDivider,\n  bottomDivider,\n  hasBgColor,\n  invertColor,\n  invertMobile,\n  invertDesktop,\n  alignTop,\n  imageFill,\n  ...props\n}) => {\n  const outerClasses = classNames('features-split section', topOuterDivider && 'has-top-divider', bottomOuterDivider && 'has-bottom-divider', hasBgColor && 'has-bg-color', invertColor && 'invert-color', className);\n  const innerClasses = classNames('features-split-inner section-inner', topDivider && 'has-top-divider', bottomDivider && 'has-bottom-divider');\n  const splitClasses = classNames('split-wrap', invertMobile && 'invert-mobile', invertDesktop && 'invert-desktop', alignTop && 'align-top');\n  const sectionHeader = {\n    title: 'Workflow that just works',\n    paragraph: 'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum â€” semper quis lectus nulla at volutpat diam ut venenatis.'\n  };\n  const percentage = 50;\n  return /*#__PURE__*/React.createElement(\"section\", Object.assign({}, props, {\n    className: outerClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgressbar, {\n    value: percentage,\n    text: `${percentage}%`,\n    styles: {\n      // Customize the root svg element\n      root: {},\n      // Customize the path, i.e. the \"completed progress\"\n      path: {\n        // Path color\n        stroke: `rgba(62, 152, 199, ${percentage / 100})`,\n        // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n        strokeLinecap: 'butt',\n        // Customize transition animation\n        transition: 'stroke-dashoffset 0.9s ease 0s',\n        // Rotate the path\n        // transform: 'rotate(0.25turn)',\n        transformOrigin: 'center center'\n      },\n      // Customize the circle behind the path, i.e. the \"total progress\"\n      trail: {\n        // Trail color\n        stroke: '#d6d6d6',\n        // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n        strokeLinecap: 'butt',\n        // Rotate the trail\n        transform: 'rotate(0.25turn)',\n        transformOrigin: 'center center'\n      },\n      // Customize the text\n      text: {\n        // Text color\n        fill: '#f88',\n        // Text size\n        fontSize: '10px',\n        textAlign: 'center',\n        justifyContent: 'center',\n        alignContent: 'center',\n        alignItems: 'center',\n        alignSelf: 'center'\n      },\n      // Customize background - only used when the `background` prop is true\n      background: {\n        fill: '#3e98c7'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: 100\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgressbar, {\n    value: percentage,\n    text: `${percentage}%`,\n    styles: {\n      // Customize the root svg element\n      root: {},\n      // Customize the path, i.e. the \"completed progress\"\n      path: {\n        // Path color\n        stroke: `rgba(62, 152, 199, ${percentage / 100})`,\n        // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n        strokeLinecap: 'butt',\n        // Customize transition animation\n        transition: 'stroke-dashoffset 0.5s ease 0s',\n        // Rotate the path\n        // transform: 'rotate(0.25turn)',\n        transformOrigin: 'center center'\n      },\n      // Customize the circle behind the path, i.e. the \"total progress\"\n      trail: {\n        // Trail color\n        stroke: '#d6d6d6',\n        // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n        strokeLinecap: 'butt',\n        // Rotate the trail\n        transform: 'rotate(0.25turn)',\n        transformOrigin: 'center center'\n      },\n      // Customize the text\n      text: {\n        // Text color\n        fill: '#f88',\n        // Text size\n        fontSize: '16px',\n        textAlign: 'center',\n        justifyContent: 'center',\n        alignContent: 'center',\n        alignItems: 'center',\n        alignSelf: 'center'\n      },\n      // Customize background - only used when the `background` prop is true\n      background: {\n        fill: '#3e98c7'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }))));\n};\n\nFeaturesSplit.propTypes = propTypes;\nFeaturesSplit.defaultProps = defaultProps;\nexport default FeaturesSplit;","map":{"version":3,"sources":["/media/haris/167d74dd-415c-4b8f-9af8-e38f039cf8e7/React js/portfolio-temp/src/components/sections/FeaturesSplit.js"],"names":["React","classNames","SectionSplitProps","SectionHeader","Image","CircularProgressbar","buildStyles","propTypes","types","defaultProps","defaults","FeaturesSplit","className","topOuterDivider","bottomOuterDivider","topDivider","bottomDivider","hasBgColor","invertColor","invertMobile","invertDesktop","alignTop","imageFill","props","outerClasses","innerClasses","splitClasses","sectionHeader","title","paragraph","percentage","width","root","path","stroke","strokeLinecap","transition","transformOrigin","trail","transform","text","fill","fontSize","textAlign","justifyContent","alignContent","alignItems","alignSelf","background"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { SectionSplitProps } from '../../utils/SectionProps';\nimport SectionHeader from './partials/SectionHeader';\nimport Image from '../elements/Image';\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\n\n\n\nconst propTypes = {\n  ...SectionSplitProps.types\n}\n\nconst defaultProps = {\n  ...SectionSplitProps.defaults\n}\n\nconst FeaturesSplit = ({\n  className,\n  topOuterDivider,\n  bottomOuterDivider,\n  topDivider,\n  bottomDivider,\n  hasBgColor,\n  invertColor,\n  invertMobile,\n  invertDesktop,\n  alignTop,\n  imageFill,\n  ...props\n}) => {\n\n  const outerClasses = classNames(\n    'features-split section',\n    topOuterDivider && 'has-top-divider',\n    bottomOuterDivider && 'has-bottom-divider',\n    hasBgColor && 'has-bg-color',\n    invertColor && 'invert-color',\n    className\n  );\n\n  const innerClasses = classNames(\n    'features-split-inner section-inner',\n    topDivider && 'has-top-divider',\n    bottomDivider && 'has-bottom-divider'\n  );\n\n  const splitClasses = classNames(\n    'split-wrap',\n    invertMobile && 'invert-mobile',\n    invertDesktop && 'invert-desktop',\n    alignTop && 'align-top'\n  );\n\n  const sectionHeader = {\n    title: 'Workflow that just works',\n    paragraph: 'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum â€” semper quis lectus nulla at volutpat diam ut venenatis.'\n  };\n  const percentage = 50;\n\n\n  return (\n    <section\n      {...props}\n      className={outerClasses}\n    >\n\n\n      <div className=\"container\">\n        <div style={{ width: 150, }}>\n\n          <CircularProgressbar\n            value={percentage}\n            text={`${percentage}%`}\n            styles={{\n              // Customize the root svg element\n              root: {},\n              // Customize the path, i.e. the \"completed progress\"\n              path: {\n                // Path color\n                stroke: `rgba(62, 152, 199, ${percentage / 100})`,\n                // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n                strokeLinecap: 'butt',\n                // Customize transition animation\n                transition: 'stroke-dashoffset 0.9s ease 0s',\n                // Rotate the path\n                // transform: 'rotate(0.25turn)',\n                transformOrigin: 'center center',\n              },\n              // Customize the circle behind the path, i.e. the \"total progress\"\n              trail: {\n                // Trail color\n                stroke: '#d6d6d6',\n                // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n                strokeLinecap: 'butt',\n                // Rotate the trail\n                transform: 'rotate(0.25turn)',\n                transformOrigin: 'center center',\n              },\n              // Customize the text\n              text: {\n                // Text color\n                fill: '#f88',\n                // Text size\n                fontSize: '10px',\n                textAlign: 'center',\n                justifyContent: 'center',\n                alignContent: 'center',\n                alignItems: 'center',\n                alignSelf: 'center'\n              },\n              // Customize background - only used when the `background` prop is true\n              background: {\n                fill: '#3e98c7',\n              },\n            }}\n          />\n        </div>\n\n         <div style={{ width: 100 }}>\n\n          <CircularProgressbar\n            value={percentage}\n            text={`${percentage}%`}\n            styles={{\n              // Customize the root svg element\n              root: {},\n              // Customize the path, i.e. the \"completed progress\"\n              path: {\n                // Path color\n                stroke: `rgba(62, 152, 199, ${percentage / 100})`,\n                // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n                strokeLinecap: 'butt',\n                // Customize transition animation\n                transition: 'stroke-dashoffset 0.5s ease 0s',\n                // Rotate the path\n                // transform: 'rotate(0.25turn)',\n                transformOrigin: 'center center',\n              },\n              // Customize the circle behind the path, i.e. the \"total progress\"\n              trail: {\n                // Trail color\n                stroke: '#d6d6d6',\n                // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\n                strokeLinecap: 'butt',\n                // Rotate the trail\n                transform: 'rotate(0.25turn)',\n                transformOrigin: 'center center',\n              },\n              // Customize the text\n              text: {\n                // Text color\n                fill: '#f88',\n                // Text size\n                fontSize: '16px',\n                textAlign: 'center',\n                justifyContent: 'center',\n                alignContent: 'center',\n                alignItems: 'center',\n                alignSelf: 'center'\n              },\n              // Customize background - only used when the `background` prop is true\n              background: {\n                fill: '#3e98c7',\n              },\n            }}\n          />\n        </div>\n        {/* <div className={innerClasses}>\n          <SectionHeader data={sectionHeader} className=\"center-content\" />\n          <div className={splitClasses}>\n\n            <div className=\"split-item\">\n              <div className=\"split-item-content center-content-mobile reveal-from-left\" data-reveal-container=\".split-item\">\n                <div className=\"text-xxs text-color-primary fw-600 tt-u mb-8\">\n                  Lightning fast workflow\n                  </div>\n                <h3 className=\"mt-0 mb-12\">\n                  Data-driven insights\n                  </h3>\n                <p className=\"m-0\">\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua â€” Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n                  </p>\n              </div>\n              <div className={\n                classNames(\n                  'split-item-image center-content-mobile reveal-from-bottom',\n                  imageFill && 'split-item-image-fill'\n                )}\n                data-reveal-container=\".split-item\">\n                <Image\n                  src={require('./../../assets/images/features-split-image-01.png')}\n                  alt=\"Features split 01\"\n                  width={528}\n                  height={396} />\n              </div>\n            </div>\n\n            <div className=\"split-item\">\n              <div className=\"split-item-content center-content-mobile reveal-from-right\" data-reveal-container=\".split-item\">\n                <div className=\"text-xxs text-color-primary fw-600 tt-u mb-8\">\n                  Lightning fast workflow\n                  </div>\n                <h3 className=\"mt-0 mb-12\">\n                  Data-driven insights\n                  </h3>\n                <p className=\"m-0\">\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua â€” Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n                  </p>\n              </div>\n              <div className={\n                classNames(\n                  'split-item-image center-content-mobile reveal-from-bottom',\n                  imageFill && 'split-item-image-fill'\n                )}\n                data-reveal-container=\".split-item\">\n                <Image\n                  src={require('./../../assets/images/features-split-image-02.png')}\n                  alt=\"Features split 02\"\n                  width={528}\n                  height={396} />\n              </div>\n            </div>\n\n            <div className=\"split-item\">\n              <div className=\"split-item-content center-content-mobile reveal-from-left\" data-reveal-container=\".split-item\">\n                <div className=\"text-xxs text-color-primary fw-600 tt-u mb-8\">\n                  Lightning fast workflow\n                  </div>\n                <h3 className=\"mt-0 mb-12\">\n                  Data-driven insights\n                  </h3>\n                <p className=\"m-0\">\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua â€” Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n                  </p>\n              </div>\n              <div className={\n                classNames(\n                  'split-item-image center-content-mobile reveal-from-bottom',\n                  imageFill && 'split-item-image-fill'\n                )}\n                data-reveal-container=\".split-item\">\n                <Image\n                  src={require('./../../assets/images/features-split-image-03.png')}\n                  alt=\"Features split 03\"\n                  width={528}\n                  height={396} />\n              </div>\n            </div>\n\n          </div>\n        </div> */}\n      </div>\n    </section>\n  );\n}\n\nFeaturesSplit.propTypes = propTypes;\nFeaturesSplit.defaultProps = defaultProps;\n\nexport default FeaturesSplit;"]},"metadata":{},"sourceType":"module"}